{"version":3,"sources":["components/Counter/Counter.module.scss","components/Button/Button.module.scss","pages/CounterPage.module.scss","components/CounterSetter/CounterSetter.module.scss","reportWebVitals.ts","components/Button/Button.tsx","components/CounterDisplay/CounterDisplay.tsx","components/Counter/Counter.tsx","bll/counterReducer.ts","bll/errorReducer.ts","components/CounterSetter/CounterSetter.tsx","pages/CounterContainer.tsx","App.tsx","bll/store.ts","bll/local-storage/localStorage.ts","index.tsx","components/CounterDisplay/CounterDisplay.module.scss"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","disabled","restProps","className","s","btn","CounterDisplay","currentValue","error","reachedMax","counterDisplay","maxCount","status","errorMassage","Counter","incrementCount","maxValue","atTheStartValue","restartCount","counter","buttonWrapper","onClick","counterInitialState","settingsApplied","startValue","tempStartValue","tempMaxValue","errorsInitialState","CounterSetter","endValue","errorStatus","setStartValue","setMaxValue","applyNewValues","errorStyle","counterSet","setSettingsWrapper","inputRow","input","type","value","onChange","e","currentTarget","CounterContainer","dispatch","useDispatch","useSelector","state","useEffect","counterPage","isMax","newValue","changeStartValueAC","changeEndValueAC","App","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.830df53a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__PMxOv\",\"buttonWrapper\":\"Counter_buttonWrapper__3CbOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1R9VU\",\"disabled\":\"Button_disabled__PIjfT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterPage\":\"CounterPage_counterPage__1dQ39\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterSet\":\"CounterSetter_counterSet__3PhaJ\",\"setSettingsWrapper\":\"CounterSetter_setSettingsWrapper__2JGT8\",\"inputRow\":\"CounterSetter_inputRow__CbIG9\",\"input\":\"CounterSetter_input__178c2\",\"buttonWrapper\":\"CounterSetter_buttonWrapper__341ff\",\"error\":\"CounterSetter_error__aY2ZK\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from './Button.module.scss'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype PropsType = DefaultButtonPropsType & {\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button: React.FC<PropsType> = ({\r\n    disabled,\r\n    ...restProps\r\n}) => {\r\n\r\n    let buttonStyle = () => {\r\n        return disabled ? s.disabled : ''\r\n    }\r\n\r\n    return (\r\n        <button className={`${s.btn} ${buttonStyle()}`}\r\n                disabled={disabled}\r\n                {...restProps}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport s from './CounterDisplay.module.scss'\r\nimport {ErrorStateType} from \"../../bll/errorReducer\";\r\n\r\nexport type errorType = {\r\n    status: boolean\r\n    massage: string\r\n}\r\n\r\ntype PropsType = {\r\n    currentValue: number\r\n    maxValue: number\r\n    error: ErrorStateType\r\n    reachedMax: boolean\r\n}\r\n\r\nexport const CounterDisplay: React.FC<PropsType> =({currentValue, error, reachedMax}) => {\r\n\r\n    // Style logic\r\n    const display = () => error.status ? error.errorMassage : currentValue\r\n    const errorStyle = () => error.status ? s.error : ''\r\n    const maxStyle = () => reachedMax ? s.maxCount : ''\r\n\r\n    return (\r\n        <div className={`${s.counterDisplay} ${maxStyle()} ${errorStyle()}`}>\r\n            <span>{display()}</span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Counter.module.scss'\r\nimport {Button} from \"../Button/Button\";\r\nimport {CounterDisplay} from \"../CounterDisplay/CounterDisplay\";\r\nimport {ErrorStateType} from \"../../bll/errorReducer\";\r\n\r\nexport type CounterPropsType = {\r\n    currentValue: number\r\n    maxValue: number\r\n    error: ErrorStateType\r\n    reachedMax: boolean\r\n    atTheStartValue: boolean\r\n    incrementCount: () => void\r\n    restartCount: () => void\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({\r\n     currentValue,\r\n     incrementCount,\r\n     error,\r\n     maxValue,\r\n     atTheStartValue,\r\n     restartCount,\r\n     reachedMax,\r\n}) => {\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <CounterDisplay currentValue={currentValue} error={error} maxValue={maxValue} reachedMax={reachedMax}/>\r\n            <div className={s.buttonWrapper}>\r\n                <Button onClick={incrementCount} disabled={reachedMax || error.status}>\r\n                    Increment\r\n                </Button>\r\n                <Button onClick={restartCount} disabled={atTheStartValue || error.status}>\r\n                    Restart\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\n\r\nexport type CounterStateType = typeof counterInitialState\r\n\r\ntype ActionType =\r\n    ReturnType<typeof incrementCountAC>\r\n    | ReturnType<typeof restartCountAC>\r\n    | ReturnType<typeof changeStartValueAC>\r\n    | ReturnType<typeof changeEndValueAC>\r\n    | ReturnType<typeof applyNewValuesAC>\r\n    | ReturnType<typeof reachedMax>\r\n\r\nexport const counterInitialState = {\r\n    settingsApplied: true,\r\n    atTheStartValue: true,\r\n    reachedMax: false,\r\n    currentValue: 0,\r\n    startValue: 0,\r\n    maxValue: 10,\r\n    tempStartValue: 0,\r\n    tempMaxValue: 10,\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = counterInitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1,\r\n                atTheStartValue: false\r\n            }\r\n        case 'RESTART': {\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n                atTheStartValue: true,\r\n                reachedMax: false\r\n            }\r\n        }\r\n        case 'CHANGE_START_VALUE': {\r\n            return {\r\n                ...state,\r\n                tempStartValue: action.newValue,\r\n                settingsApplied: false\r\n            }\r\n        }\r\n        case 'CHANGE_END_VALUE': {\r\n            return {\r\n                ...state,\r\n                tempMaxValue: action.newValue,\r\n                settingsApplied: false\r\n            }\r\n        }\r\n        case 'APPLY_SETTINGS': {\r\n            return {\r\n                ...state,\r\n                currentValue: state.tempStartValue,\r\n                startValue: state.tempStartValue,\r\n                maxValue: state.tempMaxValue,\r\n                settingsApplied: true,\r\n                reachedMax: false,\r\n                atTheStartValue: true\r\n            }\r\n        }\r\n        case 'REACHED_MAX': {\r\n            return {\r\n                ...state,\r\n                reachedMax: action.isMax\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementCountAC = () => {\r\n    return {type: 'INCREMENT'} as const\r\n}\r\n\r\nexport const restartCountAC = () => {\r\n    return {type: 'RESTART'} as const\r\n}\r\n\r\nexport const changeStartValueAC = (newValue: number) => {\r\n    return {type: 'CHANGE_START_VALUE', newValue} as const\r\n}\r\n\r\nexport const changeEndValueAC = (newValue: number) => {\r\n    return {type: 'CHANGE_END_VALUE', newValue} as const\r\n}\r\n\r\nexport const applyNewValuesAC = () => {\r\n    return {type: 'APPLY_SETTINGS'} as const\r\n}\r\n\r\nexport const reachedMax = (isMax: boolean) => {\r\n    return {type: 'REACHED_MAX', isMax} as const\r\n}","export type ErrorStateType = {\r\n    status: boolean\r\n    errorMassage: string\r\n}\r\n\r\ntype ActionType = ReturnType<typeof MaxValueTooLowError>\r\n    | ReturnType<typeof StartValueIsBelowZeroError>\r\n    | ReturnType<typeof clearError>\r\n\r\nconst errorsInitialState: ErrorStateType = {\r\n    status: false,\r\n    errorMassage: ''\r\n}\r\n\r\nexport const errorReducer = (state: ErrorStateType = errorsInitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'MAX_VALUE_TOO_LOW':\r\n            return {\r\n                ...state,\r\n                status: true,\r\n                errorMassage: 'Max value must be higher the start value'\r\n            }\r\n        case 'START_VALUE_IS_NEGATIVE':\r\n            return {\r\n                ...state,\r\n                status: true,\r\n                errorMassage: 'Start value cannot be negative'\r\n            }\r\n        case 'CLEAR_ERROR':\r\n            return {\r\n                ...state,\r\n                status: false,\r\n                errorMassage: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const MaxValueTooLowError = () => {\r\n    return {type: 'MAX_VALUE_TOO_LOW'} as const\r\n}\r\n\r\nexport const StartValueIsBelowZeroError = () => {\r\n    return {type: 'START_VALUE_IS_NEGATIVE'} as const\r\n}\r\n\r\nexport const clearError = () => {\r\n    return {type: 'CLEAR_ERROR'} as const\r\n}","import s from './CounterSetter.module.scss'\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype PropsType = {\r\n    startValue: number\r\n    endValue: number\r\n    errorStatus: boolean\r\n    settingsApplied: boolean\r\n    setStartValue: (newValue: number) => void\r\n    setMaxValue: (newValue: number) => void\r\n    applyNewValues: () => void\r\n}\r\n\r\nexport const CounterSetter: React.FC<PropsType> = ({startValue, endValue, errorStatus, setStartValue, setMaxValue, applyNewValues, settingsApplied}) => {\r\n\r\n    const errorStyle = () => errorStatus ? s.error : ''\r\n\r\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(+e.currentTarget.value)\r\n    }\r\n\r\n    const changeEndValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterSet}>\r\n            <div className={s.setSettingsWrapper}>\r\n                <div className={s.inputRow}>\r\n                    <span>Start value:</span>\r\n                    <input className={`${s.input} ${errorStyle()}`} type=\"number\" value={startValue} onChange={changeStartValue}/>\r\n                </div>\r\n                <div className={s.inputRow}>\r\n                    <span>Max value:</span>\r\n                    <input className={`${s.input} ${errorStyle()}`} type=\"number\" value={endValue} onChange={changeEndValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonWrapper}>\r\n                <Button onClick={applyNewValues} disabled={errorStatus || settingsApplied}>\r\n                    Apply settings\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport {Counter} from \"../components/Counter/Counter\";\r\nimport s from './CounterPage.module.scss'\r\nimport {\r\n    incrementCountAC,\r\n    restartCountAC, changeEndValueAC,\r\n    changeStartValueAC, CounterStateType, reachedMax, applyNewValuesAC\r\n} from \"../bll/counterReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {clearError, ErrorStateType, MaxValueTooLowError, StartValueIsBelowZeroError} from \"../bll/errorReducer\";\r\nimport {CounterSetter} from \"../components/CounterSetter/CounterSetter\";\r\n\r\nexport const CounterContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const counter = useSelector<RootStateType, CounterStateType>(state => state.counter)\r\n    const error = useSelector<RootStateType, ErrorStateType>(state => state.error)\r\n\r\n    useEffect(() => {\r\n        if (counter.tempStartValue < 0) {\r\n            dispatch(StartValueIsBelowZeroError())\r\n        } else if (counter.tempMaxValue <= counter.tempStartValue) {\r\n            dispatch(MaxValueTooLowError())\r\n        } else {\r\n            dispatch(clearError())\r\n        }\r\n    }, [counter])\r\n\r\n    const incrementCount = () => {\r\n        dispatch(incrementCountAC())\r\n        // I Think, I need to find a better solution.\r\n        if (counter.currentValue === counter.maxValue - 1) {\r\n            dispatch(reachedMax(true))\r\n        }\r\n    }\r\n\r\n    const restartCount = () => {\r\n        dispatch(restartCountAC())\r\n    }\r\n\r\n    const setStartValue = (newValue: number) => {\r\n        dispatch(changeStartValueAC(newValue))\r\n    }\r\n\r\n    const setMaxValue = (newValue: number) => {\r\n        dispatch(changeEndValueAC(newValue))\r\n    }\r\n\r\n    const applyNewValues = () => {\r\n        dispatch(applyNewValuesAC())\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterPage}>\r\n            <Counter currentValue={counter.currentValue}\r\n                     maxValue={counter.maxValue}\r\n                     reachedMax={counter.reachedMax}\r\n                     atTheStartValue={counter.atTheStartValue}\r\n                     incrementCount={incrementCount}\r\n                     error={error}\r\n                     restartCount={restartCount}/>\r\n\r\n            <CounterSetter startValue={counter.tempStartValue}\r\n                           endValue={counter.tempMaxValue}\r\n                           settingsApplied={counter.settingsApplied}\r\n                           errorStatus={error.status}\r\n                           setStartValue={setStartValue}\r\n                           setMaxValue={setMaxValue}\r\n                           applyNewValues={applyNewValues}/>\r\n\r\n        </div>\r\n    )\r\n}","import {CounterContainer} from \"./pages/CounterContainer\";\r\n\r\nexport const App = () => {\r\n    return (\r\n        <CounterContainer/>\r\n    )\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {errorReducer} from \"./errorReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {loadState, saveState} from \"./local-storage/localStorage\";\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n    error: errorReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState())\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {RootStateType} from \"../store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state')\r\n        if (serializedState === null) {\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: RootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('app-state', serializedState)\r\n    } catch {\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport {App} from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterDisplay\":\"CounterDisplay_counterDisplay__2XLsH\",\"maxCount\":\"CounterDisplay_maxCount__1p8Q-\",\"error\":\"CounterDisplay_error__Ugx2e\"};"],"sourceRoot":""}
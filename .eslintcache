[{"D:\\Web\\counter\\src\\index.tsx":"1","D:\\Web\\counter\\src\\reportWebVitals.ts":"2","D:\\Web\\counter\\src\\App.tsx":"3","D:\\Web\\counter\\src\\components\\Counter\\Counter.tsx":"4","D:\\Web\\counter\\src\\components\\Counter\\CounterDisplay\\CounterDisplay.tsx":"5","D:\\Web\\counter\\src\\components\\CounterSet\\CounterSet.tsx":"6","D:\\Web\\counter\\src\\components\\Counter\\CounterButton\\CounterButton.tsx":"7","D:\\Web\\counter\\src\\components\\CounterSet\\CounterSetButton\\CounterSetButton.tsx":"8"},{"size":518,"mtime":1610232410364,"results":"9","hashOfConfig":"10"},{"size":440,"mtime":1610016554184,"results":"11","hashOfConfig":"10"},{"size":1503,"mtime":1610399933469,"results":"12","hashOfConfig":"10"},{"size":1337,"mtime":1610399914393,"results":"13","hashOfConfig":"10"},{"size":690,"mtime":1610400113953,"results":"14","hashOfConfig":"10"},{"size":1822,"mtime":1610399754667,"results":"15","hashOfConfig":"10"},{"size":1033,"mtime":1610310597934,"results":"16","hashOfConfig":"10"},{"size":379,"mtime":1610314258706,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1mbs41c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"D:\\Web\\counter\\src\\index.tsx",[],["38","39"],"D:\\Web\\counter\\src\\reportWebVitals.ts",[],"D:\\Web\\counter\\src\\App.tsx",["40"],"D:\\Web\\counter\\src\\components\\Counter\\Counter.tsx",["41"],"import React, {useState} from \"react\";\r\nimport {CounterDisplay} from \"./CounterDisplay/CounterDisplay\";\r\nimport s from './Counter.module.scss'\r\nimport {CounterButton} from \"./CounterButton/CounterButton\";\r\nimport {limitValueType} from \"../../App\";\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    setCount: (count: number) => void\r\n    limitValue: limitValueType\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    let increment = () => {\r\n        if (props.count < props.limitValue.maxValue) {\r\n            props.setCount(props.count + 1)\r\n        }\r\n    }\r\n\r\n    let resetCount = () => {\r\n        props.setCount(props.limitValue.startValue)\r\n    }\r\n\r\n    let buttonFunctions = {\r\n        increment: increment,\r\n        resetCount: resetCount\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <CounterDisplay count={props.count} limitValue={props.limitValue}/>\r\n            <div className={s.buttonWrapper}>\r\n                <CounterButton buttonName={'Increment'} count={props.count} buttonFunctions={buttonFunctions} limitValue={props.limitValue}/>\r\n                <CounterButton buttonName={'Reset'} count={props.count} buttonFunctions={buttonFunctions} limitValue={props.limitValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Web\\counter\\src\\components\\Counter\\CounterDisplay\\CounterDisplay.tsx",[],"D:\\Web\\counter\\src\\components\\CounterSet\\CounterSet.tsx",["42"],"import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './CounterSet.module.scss'\r\nimport {CounterSetButton} from \"./CounterSetButton/CounterSetButton\";\r\nimport {limitValueType, refreshCounterType} from \"../../App\";\r\n\r\nexport type CounterSetPropsType = {\r\n    limitValue: limitValueType\r\n    setLimitValue: (limit: limitValueType) => void\r\n    counterLimitsSet: () => void\r\n    tempLimitValue: limitValueType\r\n    setTempLimitValue: (limit: limitValueType) => void\r\n}\r\n\r\nexport function CounterSet(props: CounterSetPropsType) {\r\n\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setTempLimitValue({...props.tempLimitValue, maxValue: +e.currentTarget.value})\r\n    }\r\n\r\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setTempLimitValue({...props.tempLimitValue, startValue: +e.currentTarget.value})\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterSet}>\r\n            <div className={s.setSettingsWrapper}>\r\n                <div className={s.inputRow}>\r\n                    <span>Max value:</span>\r\n                    <input className={s.input} type=\"number\" value={props.tempLimitValue.maxValue} onChange={changeMaxValue}/>\r\n                </div>\r\n                <div className={s.inputRow}>\r\n                    <span>Start value:</span>\r\n                    <input className={s.input} type=\"number\" value={props.tempLimitValue.startValue} onChange={changeStartValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonWrapper}>\r\n                <CounterSetButton counterLimitsSet={props.counterLimitsSet} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Web\\counter\\src\\components\\Counter\\CounterButton\\CounterButton.tsx",[],"D:\\Web\\counter\\src\\components\\CounterSet\\CounterSetButton\\CounterSetButton.tsx",["43"],"import React from \"react\";\r\nimport s from './CounterSetButton.module.scss'\r\nimport {refreshCounterType} from \"../../../App\";\r\n\r\ntype CounterSetButtonType = {\r\n    counterLimitsSet: () => void\r\n}\r\n\r\nexport function CounterSetButton (props: CounterSetButtonType) {\r\n\r\n\r\n    return (\r\n        <button className={s.btn} onClick={() => props.counterLimitsSet()}>Set</button>\r\n    )\r\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":1,"column":16,"nodeType":"50","messageId":"51","endLine":1,"endColumn":24},{"ruleId":"48","severity":1,"message":"52","line":1,"column":29,"nodeType":"50","messageId":"51","endLine":1,"endColumn":37},{"ruleId":"48","severity":1,"message":"53","line":3,"column":9,"nodeType":"50","messageId":"51","endLine":3,"endColumn":27},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'refreshCounterType' is defined but never used.","no-global-assign","no-unsafe-negation"]
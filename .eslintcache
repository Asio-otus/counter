[{"D:\\Web\\counter\\src\\index.tsx":"1","D:\\Web\\counter\\src\\reportWebVitals.ts":"2","D:\\Web\\counter\\src\\App.tsx":"3","D:\\web\\counter\\src\\index.tsx":"4","D:\\web\\counter\\src\\reportWebVitals.ts":"5","D:\\web\\counter\\src\\App.tsx":"6","D:\\Web\\counter\\src\\components\\Button\\Button.tsx":"7","D:\\Web\\counter\\src\\components\\CounterDisplay\\CounterDisplay.tsx":"8","D:\\Web\\counter\\src\\bll\\counterReducer.ts":"9","D:\\Web\\counter\\src\\components\\Counter\\Counter.tsx":"10","D:\\Web\\counter\\src\\components\\CounterSetter\\CounterSetter.tsx":"11","D:\\Web\\counter\\src\\pages\\CounterContainer.tsx":"12","D:\\Web\\counter\\src\\bll\\store.ts":"13","D:\\Web\\counter\\src\\bll\\errorReducer.ts":"14","D:\\Web\\counter\\src\\bll\\local-storage\\localStorage.ts":"15"},{"size":654,"mtime":1615316207407,"results":"16","hashOfConfig":"17"},{"size":440,"mtime":1615126403457,"results":"18","hashOfConfig":"17"},{"size":141,"mtime":1615308753321,"results":"19","hashOfConfig":"17"},{"size":518,"mtime":1610723144749,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1610723144756,"results":"22","hashOfConfig":"21"},{"size":2538,"mtime":1610725800114,"results":"23","hashOfConfig":"21"},{"size":631,"mtime":1615126403451,"results":"24","hashOfConfig":"17"},{"size":793,"mtime":1615361636045,"results":"25","hashOfConfig":"17"},{"size":2729,"mtime":1615372876677,"results":"26","hashOfConfig":"17"},{"size":1216,"mtime":1615366579184,"results":"27","hashOfConfig":"17"},{"size":1712,"mtime":1615372687833,"results":"28","hashOfConfig":"17"},{"size":2680,"mtime":1615372880508,"results":"29","hashOfConfig":"17"},{"size":617,"mtime":1615373558274,"results":"30","hashOfConfig":"17"},{"size":1361,"mtime":1615367433401,"results":"31","hashOfConfig":"17"},{"size":545,"mtime":1615373182777,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"f15pm2",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ij9w7z",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web\\counter\\src\\index.tsx",[],["66","67"],"D:\\Web\\counter\\src\\reportWebVitals.ts",[],"D:\\Web\\counter\\src\\App.tsx",[],"D:\\web\\counter\\src\\index.tsx",[],"D:\\web\\counter\\src\\reportWebVitals.ts",[],"D:\\web\\counter\\src\\App.tsx",["68","69","70","71"],"D:\\Web\\counter\\src\\components\\Button\\Button.tsx",[],"D:\\Web\\counter\\src\\components\\CounterDisplay\\CounterDisplay.tsx",[],"D:\\Web\\counter\\src\\bll\\counterReducer.ts",["72"],"import {Dispatch} from \"redux\";\r\n\r\nexport type CounterStateType = typeof counterInitialState\r\n\r\ntype ActionType =\r\n    ReturnType<typeof incrementCountAC>\r\n    | ReturnType<typeof restartCountAC>\r\n    | ReturnType<typeof changeStartValueAC>\r\n    | ReturnType<typeof changeEndValueAC>\r\n    | ReturnType<typeof applyNewValuesAC>\r\n    | ReturnType<typeof reachedMax>\r\n\r\nexport const counterInitialState = {\r\n    settingsApplied: true,\r\n    atTheStartValue: true,\r\n    reachedMax: false,\r\n    currentValue: 0,\r\n    startValue: 0,\r\n    maxValue: 10,\r\n    tempStartValue: 0,\r\n    tempMaxValue: 10,\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = counterInitialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1,\r\n                atTheStartValue: false\r\n            }\r\n        case 'RESTART': {\r\n            return {\r\n                ...state,\r\n                currentValue: state.startValue,\r\n                atTheStartValue: true,\r\n                reachedMax: false\r\n            }\r\n        }\r\n        case 'CHANGE_START_VALUE': {\r\n            return {\r\n                ...state,\r\n                tempStartValue: action.newValue,\r\n                settingsApplied: false\r\n            }\r\n        }\r\n        case 'CHANGE_END_VALUE': {\r\n            return {\r\n                ...state,\r\n                tempMaxValue: action.newValue,\r\n                settingsApplied: false\r\n            }\r\n        }\r\n        case 'APPLY_SETTINGS': {\r\n            return {\r\n                ...state,\r\n                currentValue: state.tempStartValue,\r\n                startValue: state.tempStartValue,\r\n                maxValue: state.tempMaxValue,\r\n                settingsApplied: true,\r\n                reachedMax: false,\r\n                atTheStartValue: true\r\n            }\r\n        }\r\n        case 'REACHED_MAX': {\r\n            return {\r\n                ...state,\r\n                reachedMax: action.isMax\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementCountAC = () => {\r\n    return {type: 'INCREMENT'} as const\r\n}\r\n\r\nexport const restartCountAC = () => {\r\n    return {type: 'RESTART'} as const\r\n}\r\n\r\nexport const changeStartValueAC = (newValue: number) => {\r\n    return {type: 'CHANGE_START_VALUE', newValue} as const\r\n}\r\n\r\nexport const changeEndValueAC = (newValue: number) => {\r\n    return {type: 'CHANGE_END_VALUE', newValue} as const\r\n}\r\n\r\nexport const applyNewValuesAC = () => {\r\n    return {type: 'APPLY_SETTINGS'} as const\r\n}\r\n\r\nexport const reachedMax = (isMax: boolean) => {\r\n    return {type: 'REACHED_MAX', isMax} as const\r\n}","D:\\Web\\counter\\src\\components\\Counter\\Counter.tsx",[],"D:\\Web\\counter\\src\\components\\CounterSetter\\CounterSetter.tsx",[],"D:\\Web\\counter\\src\\pages\\CounterContainer.tsx",["73"],"import React, {useEffect} from 'react';\r\nimport {Counter} from \"../components/Counter/Counter\";\r\nimport s from './CounterPage.module.scss'\r\nimport {\r\n    incrementCountAC,\r\n    restartCountAC, changeEndValueAC,\r\n    changeStartValueAC, CounterStateType, reachedMax, applyNewValuesAC\r\n} from \"../bll/counterReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../bll/store\";\r\nimport {clearError, ErrorStateType, MaxValueTooLowError, StartValueIsBelowZeroError} from \"../bll/errorReducer\";\r\nimport {CounterSetter} from \"../components/CounterSetter/CounterSetter\";\r\n\r\nexport const CounterContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const counter = useSelector<RootStateType, CounterStateType>(state => state.counter)\r\n    const error = useSelector<RootStateType, ErrorStateType>(state => state.error)\r\n\r\n    useEffect(() => {\r\n        if (counter.tempStartValue < 0) {\r\n            dispatch(StartValueIsBelowZeroError())\r\n        } else if (counter.tempMaxValue <= counter.tempStartValue) {\r\n            dispatch(MaxValueTooLowError())\r\n        } else {\r\n            dispatch(clearError())\r\n        }\r\n    }, [counter])\r\n\r\n    const incrementCount = () => {\r\n        dispatch(incrementCountAC())\r\n        // I Think, I need to find a better solution.\r\n        if (counter.currentValue === counter.maxValue - 1) {\r\n            dispatch(reachedMax(true))\r\n        }\r\n    }\r\n\r\n    const restartCount = () => {\r\n        dispatch(restartCountAC())\r\n    }\r\n\r\n    const setStartValue = (newValue: number) => {\r\n        dispatch(changeStartValueAC(newValue))\r\n    }\r\n\r\n    const setMaxValue = (newValue: number) => {\r\n        dispatch(changeEndValueAC(newValue))\r\n    }\r\n\r\n    const applyNewValues = () => {\r\n        dispatch(applyNewValuesAC())\r\n    }\r\n\r\n    return (\r\n        <div className={s.counterPage}>\r\n            <Counter currentValue={counter.currentValue}\r\n                     maxValue={counter.maxValue}\r\n                     reachedMax={counter.reachedMax}\r\n                     atTheStartValue={counter.atTheStartValue}\r\n                     incrementCount={incrementCount}\r\n                     error={error}\r\n                     restartCount={restartCount}/>\r\n\r\n            <CounterSetter startValue={counter.tempStartValue}\r\n                           endValue={counter.tempMaxValue}\r\n                           settingsApplied={counter.settingsApplied}\r\n                           errorStatus={error.status}\r\n                           setStartValue={setStartValue}\r\n                           setMaxValue={setMaxValue}\r\n                           applyNewValues={applyNewValues}/>\r\n\r\n        </div>\r\n    )\r\n}","D:\\Web\\counter\\src\\bll\\store.ts",[],"D:\\Web\\counter\\src\\bll\\errorReducer.ts",[],"D:\\Web\\counter\\src\\bll\\local-storage\\localStorage.ts",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":36,"column":11,"nodeType":"80","messageId":"81","endLine":36,"endColumn":31},{"ruleId":"78","severity":1,"message":"82","line":44,"column":11,"nodeType":"80","messageId":"81","endLine":44,"endColumn":27},{"ruleId":"78","severity":1,"message":"83","line":48,"column":11,"nodeType":"80","messageId":"81","endLine":48,"endColumn":27},{"ruleId":"78","severity":1,"message":"84","line":52,"column":11,"nodeType":"80","messageId":"81","endLine":52,"endColumn":32},{"ruleId":"78","severity":1,"message":"85","line":1,"column":9,"nodeType":"80","messageId":"81","endLine":1,"endColumn":17},{"ruleId":"86","severity":1,"message":"87","line":28,"column":8,"nodeType":"88","endLine":28,"endColumn":17,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'buttonStyleIncrement' is assigned a value but never used.","Identifier","unusedVar","'buttonStyleReset' is assigned a value but never used.","'buttonSetCounter' is assigned a value but never used.","'buttonStyleSetCounter' is assigned a value but never used.","'Dispatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [counter, dispatch]",{"range":"95","text":"96"},[1167,1176],"[counter, dispatch]"]